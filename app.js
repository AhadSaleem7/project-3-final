// Application State
let currentLanguage = 'hi';
let conversationState = 'welcome';
let currentSymptomFlow = null;

// Translation data
const translations = {
    landing: {
        title: {
            hi: "рдЧреНрд░рд╛рдореАрдг рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ",
            en: "Rural Healthcare Assistant",
            mr: "рдЧреНрд░рд╛рдореАрдг рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ"
        },
        subtitle: {
            hi: "рдЖрдкрдХрд╛ рдбрд┐рдЬрд┐рдЯрд▓ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╛рдереА",
            en: "Your Digital Health Companion",
            mr: "рддреБрдордЪрд╛ рдбрд┐рдЬрд┐рдЯрд▓ рдЖрд░реЛрдЧреНрдп рд╕рд╛рдереА"
        },
        startChat: {
            hi: "рдЪреИрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ",
            en: "Start Chat",
            mr: "рдЪреЕрдЯ рд╕реБрд░реВ рдХрд░рд╛"
        },
        supportedBy: {
            hi: "PMJAY рдФрд░ рдбрд┐рдЬрд┐рдЯрд▓ рдЗрдВрдбрд┐рдпрд╛ рдкрд╣рд▓ рджреНрд╡рд╛рд░рд╛ рд╕рдорд░реНрдерд┐рдд",
            en: "Supported by PMJAY & Digital India Initiative",
            mr: "PMJAY рдЖрдгрд┐ рдбрд┐рдЬрд┐рдЯрд▓ рдЗрдВрдбрд┐рдпрд╛ рдЙрдкрдХреНрд░рдорд╛рджреНрд╡рд╛рд░реЗ рд╕рдорд░реНрдерд┐рдд"
        },
        features: [
            {
                title: {hi: "рддреБрд░рдВрдд рд╕рд▓рд╛рд╣", en: "Instant Advice", mr: "рддрддреНрдХрд╛рд│ рд╕рд▓реНрд▓рд╛"},
                desc: {hi: "рд▓рдХреНрд╖рдгреЛрдВ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ", en: "Check your symptoms", mr: "рд▓рдХреНрд╖рдгреЗ рддрдкрд╛рд╕рд╛"}
            },
            {
                title: {hi: "рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ", en: "Appointments", mr: "рднреЗрдЯреА"},
                desc: {hi: "рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ", en: "Meet doctors", mr: "рдбреЙрдХреНрдЯрд░рд╛рдВрдирд╛ рднреЗрдЯрд╛"}
            },
            {
                title: {hi: "рдЖрдкрд╛рддрдХрд╛рд▓", en: "Emergency", mr: "рдЖрдкрддреНрдХрд╛рд▓реАрди"},
                desc: {hi: "рддреБрд░рдВрдд рдорджрдж рдкрд╛рдПрдВ", en: "Get immediate help", mr: "рддрддреНрдХрд╛рд│ рдорджрдд рдорд┐рд│рд╡рд╛"}
            },
            {
                title: {hi: "рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╢рд┐рдХреНрд╖рд╛", en: "Health Education", mr: "рдЖрд░реЛрдЧреНрдп рд╢рд┐рдХреНрд╖рдг"},
                desc: {hi: "рдЬрд╛рдирдХрд╛рд░реА рдкрд╛рдПрдВ", en: "Get information", mr: "рдорд╛рд╣рд┐рддреА рдорд┐рд│рд╡рд╛"}
            }
        ]
    },
    chat: {
        welcome: {
            hi: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
            en: "Hello! I'm your health assistant. How can I help you today?",
            mr: "рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ рдЖрд╣реЗред рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?"
        },
        symptoms: {
            fever: {
                question: {
                    hi: "рдмреБрдЦрд╛рд░ рдХрд┐рддрдиреЗ рджрд┐рди рд╕реЗ рд╣реИ?",
                    en: "How many days have you had fever?",
                    mr: "рддрд╛рдк рдХрд┐рддреА рджрд┐рд╡рд╕рд╛рдВрдкрд╛рд╕реВрди рдЖрд╣реЗ?"
                },
                options: {
                    hi: ["1 рджрд┐рди", "2-3 рджрд┐рди", "4+ рджрд┐рди"],
                    en: ["1 day", "2-3 days", "4+ days"],
                    mr: ["1 рджрд┐рд╡рд╕", "2-3 рджрд┐рд╡рд╕", "4+ рджрд┐рд╡рд╕"]
                },
                responses: {
                    hi: [
                        "рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдкрд╛рдиреА рдкрд┐рдПрдВред рдмреБрдЦрд╛рд░ рдХрдо рд╣реИред рдЕрдЧрд░ 102┬░F рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред",
                        "рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред 2-3 рджрд┐рди рдХрд╛ рдмреБрдЦрд╛рд░ рдЪрд┐рдВрддрд╛ рдХреА рдмрд╛рдд рд╣реИред рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗ рд╕рдХрддреЗ рд╣реИрдВред",
                        "рддреБрд░рдВрдд рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ! рд▓рдВрдмреЗ рд╕рдордп рдХрд╛ рдмреБрдЦрд╛рд░ рдЧрдВрднреАрд░ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рдмреНрд▓рдб рдЯреЗрд╕реНрдЯ рдХрд░рд╛рдПрдВред"
                    ],
                    en: [
                        "Rest and drink plenty of water. Low fever. See doctor if above 102┬░F.",
                        "Consult a doctor. 2-3 days fever needs attention. You can take paracetamol.",
                        "Go to hospital immediately! Prolonged fever can be serious. Get blood test done."
                    ],
                    mr: [
                        "рдЖрд░рд╛рдо рдХрд░рд╛ рдЖрдгрд┐ рдкрд╛рдгреА рдкреНрдпрд╛ред рдХрдореА рддрд╛рдк рдЖрд╣реЗ. 102┬░F рдкреЗрдХреНрд╖рд╛ рдЬрд╛рд╕реНрдд рдЕрд╕рд▓реНрдпрд╛рд╕ рдбреЙрдХреНрдЯрд░рд╛рдВрдирд╛ рднреЗрдЯрд╛.",
                        "рдбреЙрдХреНрдЯрд░рд╛рдВрдЪрд╛ рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛ред 2-3 рджрд┐рд╡рд╕рд╛рдВрдЪрд╛ рддрд╛рдк рдЪрд┐рдВрддрд╛рдЬрдирдХ рдЖрд╣реЗ. рдкреЕрд░рд╛рд╕рд┐рдЯрд╛рдореЙрд▓ рдШреЗрдК рд╢рдХрддрд╛.",
                        "рддрд╛рдмрдбрддреЛрдм рд░реБрдЧреНрдгрд╛рд▓рдпрд╛рдд рдЬрд╛! рджреАрд░реНрдШрдХрд╛рд│рдЪрд╛ рддрд╛рдк рдЧрдВрднреАрд░ рдЕрд╕реВ рд╢рдХрддреЛ. рдмреНрд▓рдб рдЯреЗрд╕реНрдЯ рдХрд░рд╛рд╡рд╛."
                    ]
                }
            },
            cough: {
                question: {
                    hi: "рдЦрд╛рдВрд╕реА рдХреЗ рд╕рд╛рде рдХреЛрдИ рдФрд░ рд▓рдХреНрд╖рдг рд╣реИ?",
                    en: "Any other symptoms with the cough?",
                    mr: "рдЦреЛрдХрд▓реНрдпрд╛рд╕реЛрдмрдд рдЗрддрд░ рд▓рдХреНрд╖рдгреЗ рдЖрд╣реЗрдд рдХрд╛?"
                },
                options: {
                    hi: ["рдмреБрдЦрд╛рд░ рднреА рд╣реИ", "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл", "рд╕рд┐рд░реНрдл рдЦрд╛рдВрд╕реА"],
                    en: ["Also have fever", "Breathing difficulty", "Only cough"],
                    mr: ["рддрд╛рдкрд╣реА рдЖрд╣реЗ", "рд╢реНрд╡рд╛рд╕реЛрдЪреНрдЫрд╡рд╛рд╕рд╛рдЪреА рдЕрдбрдЪрдг", "рдлрдХреНрдд рдЦреЛрдХрд▓рд╛"]
                },
                responses: {
                    hi: [
                        "рдмреБрдЦрд╛рд░ рдФрд░ рдЦрд╛рдВрд╕реА - рд╕рдВрдХреНрд░рдордг рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рдбреЙрдХреНрдЯрд░ рд╕реЗ рддреБрд░рдВрдд рдорд┐рд▓реЗрдВред рдЧрд░реНрдо рдкрд╛рдиреА рдкрд┐рдПрдВред",
                        "ЁЯЪи рд╕рд╛рдВрд╕ рдХреА рддрдХрд▓реАрдл рдЧрдВрднреАрд░ рд╣реИ - рддреБрд░рдВрдд рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВ рдпрд╛ 108 рдХреЙрд▓ рдХрд░реЗрдВ!",
                        "рд╕рд╛рдорд╛рдиреНрдп рдЦрд╛рдВрд╕реА - рд╢рд╣рдж-рдЕрджрд░рдХ рд▓реЗрдВред 3 рджрд┐рди рдореЗрдВ рдареАрдХ рди рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред"
                    ],
                    en: [
                        "Fever with cough - might be infection. See doctor immediately. Drink warm water.",
                        "ЁЯЪи Breathing difficulty is serious - go to hospital immediately or call 108!",
                        "Normal cough - take honey-ginger. See doctor if not better in 3 days."
                    ],
                    mr: [
                        "рддрд╛рдк рдЖрдгрд┐ рдЦреЛрдХрд▓рд╛ - рд╕рдВрдХреНрд░рдордг рдЕрд╕реВ рд╢рдХрддреЛ. рдбреЙрдХреНрдЯрд░рд╛рдВрдирд╛ рддрд╛рдмрдбрддреЛрдм рднреЗрдЯрд╛. рдХреЛрдордЯ рдкрд╛рдгреА рдкреНрдпрд╛.",
                        "ЁЯЪи рд╢реНрд╡рд╛рд╕рд╛рдЪреА рдЕрдбрдЪрдг рдЧрдВрднреАрд░ рдЖрд╣реЗ - рддрд╛рдмрдбрддреЛрдм рд░реБрдЧреНрдгрд╛рд▓рдпрд╛рдд рдЬрд╛ рдХрд┐рдВрд╡рд╛ 108 рд╡рд░ рдХреЙрд▓ рдХрд░рд╛!",
                        "рд╕рд╛рдорд╛рдиреНрдп рдЦреЛрдХрд▓рд╛ - рдордз-рдЖрд▓реЗ рдШреНрдпрд╛. 3 рджрд┐рд╡рд╕рд╛рдд рдмрд░реЗ рди рдЭрд╛рд▓реНрдпрд╛рд╕ рдбреЙрдХреНрдЯрд░рд╛рдВрдирд╛ рднреЗрдЯрд╛."
                    ]
                }
            }
        }
    },
    ui: {
        botName: {
            hi: "рдЧреНрд░рд╛рдореАрдг рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ",
            en: "Rural Healthcare Assistant",
            mr: "рдЧреНрд░рд╛рдореАрдг рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ"
        },
        online: {hi: "рдСрдирд▓рд╛рдЗрди", en: "online", mr: "рдСрдирд▓рд╛рдЗрди"},
        today: {hi: "рдЖрдЬ", en: "Today", mr: "рдЖрдЬ"},
        typing: {hi: "рдмреЙрдЯ рд▓рд┐рдЦ рд░рд╣рд╛ рд╣реИ...", en: "Bot is typing...", mr: "рдмреЙрдЯ рдЯрд╛рдЗрдк рдХрд░рдд рдЖрд╣реЗ..."},
        inputPlaceholder: {hi: "рд╕рдВрджреЗрд╢ рд▓рд┐рдЦреЗрдВ...", en: "Type a message...", mr: "рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░рд╛..."},
        emergencyTitle: {hi: "ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛", en: "ЁЯЪи Emergency Help", mr: "ЁЯЪи рдЖрдкрддреНрдХрд╛рд▓реАрди рдорджрдд"},
        callImmediately: {hi: "рддреБрд░рдВрдд рдХреЙрд▓ рдХрд░реЗрдВ:", en: "Call immediately:", mr: "рддрддреНрдХрд╛рд│ рдХреЙрд▓ рдХрд░рд╛:"},
        ambulanceService: {hi: "рдПрдореНрдмреБрд▓реЗрдВрд╕ рд╕реЗрд╡рд╛", en: "Ambulance Service", mr: "рд░реБрдЧреНрдгрд╡рд╛рд╣рд┐рдХрд╛ рд╕реЗрд╡рд╛"},
        districtHospital: {hi: "рдЬрд┐рд▓рд╛ рдЕрд╕реНрдкрддрд╛рд▓", en: "District Hospital", mr: "рдЬрд┐рд▓реНрд╣рд╛ рд░реБрдЧреНрдгрд╛рд▓рдп"},
        nearbyFacilities: {hi: "ЁЯУН рдирдЬрджреАрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░", en: "ЁЯУН Nearby Health Centers", mr: "ЁЯУН рдЬрд╡рд│реАрд▓ рдЖрд░реЛрдЧреНрдп рдХреЗрдВрджреНрд░реЗ"},
        settingsTitle: {hi: "тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕", en: "тЪЩя╕П Settings", mr: "тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрдЬ"},
        languageLabel: {hi: "рднрд╛рд╖рд╛:", en: "Language:", mr: "рднрд╛рд╖рд╛:"},
        quickActions: {
            symptoms: {hi: "рд▓рдХреНрд╖рдг рдЬрд╛рдВрдЪ", en: "Check Symptoms", mr: "рд▓рдХреНрд╖рдгреЗ рддрдкрд╛рд╕рд╛"},
            appointment: {hi: "рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ", en: "Book Appointment", mr: "рднреЗрдЯ рдмреБрдХ рдХрд░рд╛"},
            emergency: {hi: "рдЖрдкрд╛рддрдХрд╛рд▓", en: "Emergency", mr: "рдЖрдкрддреНрдХрд╛рд▓реАрди"},
            education: {hi: "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЯрд┐рдкреНрд╕", en: "Health Tips", mr: "рдЖрд░реЛрдЧреНрдп рдЯрд┐рдкреНрд╕"}
        },
        facilities: [
            {
                name: {hi: "рдЬрд┐рд▓рд╛ рдЕрд╕реНрдкрддрд╛рд▓", en: "District Hospital", mr: "рдЬрд┐рд▓реНрд╣рд╛ рд░реБрдЧреНрдгрд╛рд▓рдп"},
                type: {hi: "рд╕рд░рдХрд╛рд░реА рдЕрд╕реНрдкрддрд╛рд▓", en: "Government Hospital", mr: "рд╕рд░рдХрд╛рд░реА рд░реБрдЧреНрдгрд╛рд▓рдп"},
                hours: {hi: "24/7 рдЦреБрд▓рд╛", en: "24/7 Open", mr: "24/7 рдЙрдШрдбреЗ"}
            },
            {
                name: {hi: "рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░", en: "Primary Health Center", mr: "рдкреНрд░рд╛рдердорд┐рдХ рдЖрд░реЛрдЧреНрдп рдХреЗрдВрджреНрд░"},
                type: {hi: "рд╕рд░рдХрд╛рд░реА рдХреЗрдВрджреНрд░", en: "Government Center", mr: "рд╕рд░рдХрд╛рд░реА рдХреЗрдВрджреНрд░"},
                hours: {hi: "8 AM - 6 PM", en: "8 AM - 6 PM", mr: "8 AM - 6 PM"}
            },
            {
                name: {hi: "рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛", en: "ASHA Worker", mr: "рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддреА"},
                type: {hi: "рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдпрдХрд░реНрддрд╛", en: "Community Health Worker", mr: "рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдЖрд░реЛрдЧреНрдп рдХрд╛рд░реНрдпрдХрд░реНрддрд╛"},
                hours: {hi: "9 AM - 5 PM", en: "9 AM - 5 PM", mr: "9 AM - 5 PM"}
            }
        ]
    }
};

// Language configuration
const languageConfig = {
    hi: { flag: "ЁЯЗоЁЯЗ│", code: "рд╣рд┐рдВ", name: "рд╣рд┐рдВрджреА" },
    en: { flag: "ЁЯЗмЁЯЗз", code: "EN", name: "English" },
    mr: { flag: "ЁЯЗоЁЯЗ│", code: "рдорд░", name: "рдорд░рд╛рдареА" }
};

// Health education content
const healthEducationContent = {
    hi: [
        { title: "рдЯреАрдХрд╛рдХрд░рдг рдХрд╛ рдорд╣рддреНрд╡", content: "рдмрдЪреНрдЪреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рдордп рдкрд░ рдЯреАрдХрд╛рдХрд░рдг рдЬрд░реВрд░реА рд╣реИред рд╕рд░рдХрд╛рд░реА рдХреЗрдВрджреНрд░реЛрдВ рдкрд░ рдореБрдлреНрдд рдЯреАрдХреЗ рдЙрдкрд▓рдмреНрдз рд╣реИрдВред" },
        { title: "рдорд╛рддреГрддреНрд╡ рджреЗрдЦрднрд╛рд▓", content: "рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдореЗрдВ рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ, рдкреМрд╖реНрдЯрд┐рдХ рдЖрд╣рд╛рд░ рдФрд░ рдЖрд░рд╛рдо рдЬрд░реВрд░реА рд╣реИред" },
        { title: "рд╕реНрд╡рдЪреНрдЫрддрд╛ рдХрд╛ рдорд╣рддреНрд╡", content: "рд╣рд╛рде рдзреЛрдирд╛, рд╕рд╛рдл рдкрд╛рдиреА рдкреАрдирд╛ рдФрд░ рд╕реНрд╡рдЪреНрдЫ рд╡рд╛рддрд╛рд╡рд░рдг рдмреАрдорд╛рд░рд┐рдпреЛрдВ рд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИред" },
        { title: "рдкреЛрд╖рдг рдХреА рдЬрд╛рдирдХрд╛рд░реА", content: "рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рдореЗрдВ рджрд╛рд▓, рд╕рдмреНрдЬреА, рдлрд▓ рдФрд░ рдЕрдирд╛рдЬ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред рдмрдЪреНрдЪреЛрдВ рдХреЛ рд╕реНрддрдирдкрд╛рди рдХрд░рд╛рдПрдВред" }
    ],
    en: [
        { title: "Importance of Vaccination", content: "Timely vaccination for children is essential. Free vaccines are available at government centers." },
        { title: "Maternal Care", content: "Regular checkups, nutritious diet and rest are important during pregnancy." },
        { title: "Importance of Hygiene", content: "Hand washing, drinking clean water and clean environment prevents diseases." },
        { title: "Nutrition Information", content: "Include pulses, vegetables, fruits and grains in balanced diet. Breastfeed children." }
    ],
    mr: [
        { title: "рд▓рд╕реАрдХрд░рдгрд╛рдЪреЗ рдорд╣рддреНрддреНрд╡", content: "рдореБрд▓рд╛рдВрд╕рд╛рдареА рд╡реЗрд│реЗрд╡рд░ рд▓рд╕реАрдХрд░рдг рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ. рд╕рд░рдХрд╛рд░реА рдХреЗрдВрджреНрд░рд╛рдВрд╡рд░ рдореЛрдлрдд рд▓рд╕реА рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗрдд." },
        { title: "рдорд╛рддреГрддреНрд╡ рдХрд╛рд│рдЬреА", content: "рдЧрд░реНрднрд╛рд╡рд╕реНрдереЗрдд рдирд┐рдпрдорд┐рдд рддрдкрд╛рд╕рдгреА, рдкреМрд╖реНрдЯрд┐рдХ рдЖрд╣рд╛рд░ рдЖрдгрд┐ рд╡рд┐рд╢реНрд░рд╛рдВрддреА рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ." },
        { title: "рд╕реНрд╡рдЪреНрдЫрддреЗрдЪреЗ рдорд╣рддреНрддреНрд╡", content: "рд╣рд╛рдд рдзреБрдгреЗ, рд╕реНрд╡рдЪреНрдЫ рдкрд╛рдгреА рдкрд┐рдгреЗ рдЖрдгрд┐ рд╕реНрд╡рдЪреНрдЫ рд╡рд╛рддрд╛рд╡рд░рдг рдЖрдЬрд╛рд░рд╛рдВрдкрд╛рд╕реВрди рд╡рд╛рдЪрд╡рддреЗ." },
        { title: "рдкреЛрд╖рдгрд╛рдЪреА рдорд╛рд╣рд┐рддреА", content: "рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░рд╛рдд рдбрд╛рд│, рднрд╛рдЬреА, рдлрд│реЗ рдЖрдгрд┐ рдзрд╛рдиреНрдп рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдХрд░рд╛. рдореБрд▓рд╛рдВрдирд╛ рд╕реНрддрдирдкрд╛рди рдХрд░рд╛рд╡реЗ." }
    ]
};

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
    console.log('Rural Healthcare Assistant initialized');
    setupEventListeners();
    updateAllTexts();
});

function setupEventListeners() {
    // Chat input enter key
    const chatInput = document.getElementById('chat-input');
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    // Close language menu when clicking outside
    document.addEventListener('click', function(e) {
        const langMenu = document.getElementById('language-menu');
        const langToggle = document.querySelector('.language-toggle');
        
        if (langMenu && !langMenu.contains(e.target) && 
            langToggle && !langToggle.contains(e.target)) {
            langMenu.classList.add('hidden');
        }
    });
    
    console.log('Event listeners setup complete');
}

// Language Functions
window.changeLanguage = function(lang) {
    console.log(`Changing language to: ${lang}`);
    if (lang === currentLanguage) return;
    
    currentLanguage = lang;
    updateLanguageUI();
    updateAllTexts();
    
    // Close any open modals/menus
    closeModal('settings-modal');
    const langMenu = document.getElementById('language-menu');
    if (langMenu) {
        langMenu.classList.add('hidden');
    }
    
    // Confirmation in chat if chat is open
    if (!document.getElementById('chat-interface').classList.contains('hidden')) {
        setTimeout(() => {
            const confirmMsg = {
                hi: `рднрд╛рд╖рд╛ ${languageConfig[lang].name} рдореЗрдВ рдмрджрд▓ рдЧрдИ рд╣реИред`,
                en: `Language changed to ${languageConfig[lang].name}.`,
                mr: `рднрд╛рд╖рд╛ ${languageConfig[lang].name} рдордзреНрдпреЗ рдмрджрд▓рд▓реА рдЖрд╣реЗ.`
            };
            addBotMessage(confirmMsg[currentLanguage]);
        }, 300);
    }
    
    console.log(`Language changed to: ${lang}`);
};

window.changeLanguageFromChat = function(lang) {
    changeLanguage(lang);
};

function updateLanguageUI() {
    // Update language selector buttons
    document.querySelectorAll('.language-option').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-lang') === currentLanguage) {
            btn.classList.add('active');
        }
    });
    
    // Update setting buttons
    document.querySelectorAll('.language-setting-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.onclick && btn.onclick.toString().includes(`'${currentLanguage}'`)) {
            btn.classList.add('active');
        }
    });
    
    // Update header language toggle
    const currentFlag = document.getElementById('current-flag');
    const currentLangCode = document.getElementById('current-lang-code');
    if (currentFlag && currentLangCode) {
        currentFlag.textContent = languageConfig[currentLanguage].flag;
        currentLangCode.textContent = languageConfig[currentLanguage].code;
    }
}

function updateAllTexts() {
    console.log(`Updating texts for language: ${currentLanguage}`);
    
    // Landing page
    updateElementById('main-title', translations.landing.title[currentLanguage]);
    updateElementById('main-subtitle', translations.landing.subtitle[currentLanguage]);
    updateElementById('start-chat-btn', translations.landing.startChat[currentLanguage]);
    updateElementById('supported-text', translations.landing.supportedBy[currentLanguage]);
    
    // Features
    translations.landing.features.forEach((feature, index) => {
        updateElementById(`feature-${index}-title`, feature.title[currentLanguage]);
        updateElementById(`feature-${index}-desc`, feature.desc[currentLanguage]);
    });
    
    // Chat UI
    updateElementById('bot-name', translations.ui.botName[currentLanguage]);
    updateElementById('bot-status-text', translations.ui.online[currentLanguage]);
    updateElementById('today-label', translations.ui.today[currentLanguage]);
    updateElementById('typing-text', translations.ui.typing[currentLanguage]);
    
    // Update placeholder
    const chatInput = document.getElementById('chat-input');
    if (chatInput) {
        chatInput.placeholder = translations.ui.inputPlaceholder[currentLanguage];
    }
    
    // Quick actions
    updateElementById('quick-symptoms', translations.ui.quickActions.symptoms[currentLanguage]);
    updateElementById('quick-appointment', translations.ui.quickActions.appointment[currentLanguage]);
    updateElementById('quick-emergency', translations.ui.quickActions.emergency[currentLanguage]);
    updateElementById('quick-education', translations.ui.quickActions.education[currentLanguage]);
    
    // Modals
    updateElementById('emergency-title', translations.ui.emergencyTitle[currentLanguage]);
    updateElementById('call-immediately', translations.ui.callImmediately[currentLanguage]);
    updateElementById('ambulance-service', translations.ui.ambulanceService[currentLanguage]);
    updateElementById('district-hospital', translations.ui.districtHospital[currentLanguage]);
    updateElementById('nearby-facilities', translations.ui.nearbyFacilities[currentLanguage]);
    updateElementById('settings-title', translations.ui.settingsTitle[currentLanguage]);
    updateElementById('language-label', translations.ui.languageLabel[currentLanguage]);
    
    // Facilities
    translations.ui.facilities.forEach((facility, index) => {
        updateElementById(`facility-name-${index}`, facility.name[currentLanguage]);
        updateElementById(`facility-type-${index}`, facility.type[currentLanguage]);
        updateElementById(`facility-hours-${index}`, facility.hours[currentLanguage]);
    });
}

function updateElementById(id, text) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = text;
    }
}

// Chat Functions
window.startChat = function() {
    console.log('Starting general chat');
    startChatInterface();
    
    // Send welcome message
    setTimeout(() => {
        addBotMessage(translations.chat.welcome[currentLanguage]);
    }, 500);
};

window.startChatWithAction = function(action) {
    console.log(`Starting chat with action: ${action}`);
    startChatInterface();
    
    // Send welcome message and immediately trigger action
    setTimeout(() => {
        addBotMessage(translations.chat.welcome[currentLanguage]);
        setTimeout(() => {
            handleQuickAction(action);
        }, 1000);
    }, 500);
};

function startChatInterface() {
    document.getElementById('landing-page').classList.add('hidden');
    document.getElementById('chat-interface').classList.remove('hidden');
    
    // Clear previous messages
    const messagesContainer = document.getElementById('messages-container');
    messagesContainer.innerHTML = `
        <div class="welcome-message">
            <div class="date-separator" id="today-label">${translations.ui.today[currentLanguage]}</div>
        </div>
    `;
}

window.goBack = function() {
    console.log('Going back to landing page');
    document.getElementById('chat-interface').classList.add('hidden');
    document.getElementById('landing-page').classList.remove('hidden');
    
    // Reset conversation state
    conversationState = 'welcome';
    currentSymptomFlow = null;
};

window.toggleLanguageMenu = function() {
    const langMenu = document.getElementById('language-menu');
    if (langMenu) {
        langMenu.classList.toggle('hidden');
    }
};

window.showSettings = function() {
    document.getElementById('settings-modal').classList.remove('hidden');
};

window.sendMessage = function() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    
    if (message === '') return;
    
    console.log(`User message: ${message}`);
    addUserMessage(message);
    input.value = '';
    
    // Process bot response
    setTimeout(() => {
        processBotResponse(message);
    }, 800);
};

window.selectOption = function(option) {
    console.log(`Option selected: ${option}`);
    addUserMessage(option);
    
    setTimeout(() => {
        handleOptionResponse(option);
    }, 800);
};

window.closeModal = function(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('hidden');
    }
};

window.handleQuickAction = function(action) {
    console.log(`Quick action: ${action}`);
    
    switch(action) {
        case 'symptoms':
            handleSymptomsAction();
            break;
        case 'appointment':
            handleAppointmentAction();
            break;
        case 'emergency':
            handleEmergencyAction();
            break;
        case 'education':
            handleEducationAction();
            break;
    }
};

window.toggleVoice = function() {
    const voiceBtn = document.getElementById('voice-btn');
    
    if (voiceBtn.classList.contains('recording')) {
        // Stop recording
        voiceBtn.classList.remove('recording');
        voiceBtn.textContent = 'ЁЯОд';
        
        // Simulate voice message
        setTimeout(() => {
            const voiceMsg = {
                hi: "ЁЯО╡ рд╡реЙрдЗрд╕ рдореИрд╕реЗрдЬ (3 рд╕реЗрдХрдВрдб)",
                en: "ЁЯО╡ Voice message (3 seconds)",
                mr: "ЁЯО╡ рд╡реНрд╣реЙрдЗрд╕ рдореЗрд╕реЗрдЬ (3 рд╕реЗрдХрдВрдб)"
            };
            
            addUserMessage(voiceMsg[currentLanguage]);
            
            setTimeout(() => {
                const response = {
                    hi: "рдореИрдВрдиреЗ рдЖрдкрдХрд╛ рд╡реЙрдЗрд╕ рдореИрд╕реЗрдЬ рд╕реБрдирд╛ред рдХреГрдкрдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдореЗрдВ рднреА рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ?",
                    en: "I heard your voice message. Can you please also type it?",
                    mr: "рдореА рддреБрдордЪрд╛ рд╡реНрд╣реЙрдЗрд╕ рдореЗрд╕реЗрдЬ рдРрдХрд▓рд╛. рдХреГрдкрдпрд╛ рдордЬрдХреВрд░рд╛рддрд╣реА рд╕рд╛рдВрдЧреВ рд╢рдХрддрд╛ рдХрд╛?"
                };
                addBotMessage(response[currentLanguage]);
            }, 800);
        }, 500);
        
    } else {
        // Start recording
        voiceBtn.classList.add('recording');
        voiceBtn.textContent = 'тП╣я╕П';
    }
};

function addUserMessage(text) {
    const messagesContainer = document.getElementById('messages-container');
    const messageDiv = createMessageElement('user', text);
    messagesContainer.appendChild(messageDiv);
    scrollToBottom();
}

function addBotMessage(text, options = null) {
    showTypingIndicator();
    
    setTimeout(() => {
        hideTypingIndicator();
        const messagesContainer = document.getElementById('messages-container');
        const messageDiv = createMessageElement('bot', text, options);
        messagesContainer.appendChild(messageDiv);
        scrollToBottom();
    }, 1000);
}

function createMessageElement(sender, text, options = null) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;
    
    const time = new Date().toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
    });
    
    let optionsHtml = '';
    if (options && options.length > 0) {
        optionsHtml = `
            <div class="message-options">
                ${options.map(option => `
                    <button class="option-btn" onclick="selectOption('${option.replace(/'/g, "\\'")}')">
                        ${option}
                    </button>
                `).join('')}
            </div>
        `;
    }
    
    messageDiv.innerHTML = `
        <div class="message-bubble">
            <div class="message-content">${text}</div>
            ${optionsHtml}
            <div class="message-time">${time}</div>
        </div>
    `;
    
    return messageDiv;
}

function processBotResponse(userMessage) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Detect symptoms and keywords
    if (detectSymptom(lowerMessage, 'fever')) {
        handleSymptomFlow('fever');
    } else if (detectSymptom(lowerMessage, 'cough')) {
        handleSymptomFlow('cough');
    } else if (detectKeyword(lowerMessage, 'headache')) {
        handleHeadacheFlow();
    } else if (detectKeyword(lowerMessage, 'stomach')) {
        handleStomachFlow();
    } else if (detectKeyword(lowerMessage, 'appointment') || detectKeyword(lowerMessage, 'doctor')) {
        handleAppointmentAction();
    } else if (detectKeyword(lowerMessage, 'emergency')) {
        handleEmergencyAction();
    } else {
        handleGenericResponse();
    }
}

function detectSymptom(message, symptom) {
    const keywords = {
        fever: ['рдмреБрдЦрд╛рд░', 'fever', 'рддрд╛рдк', 'рддрд╛рдкрдорд╛рди', 'рдЧрд░реНрдореА'],
        cough: ['рдЦрд╛рдВрд╕реА', 'cough', 'рдЦреЛрдХрд▓рд╛', 'рдХрдл']
    };
    
    return keywords[symptom]?.some(keyword => message.includes(keyword)) || false;
}

function detectKeyword(message, category) {
    const keywords = {
        headache: ['рд╕рд┐рд░рджрд░реНрдж', 'headache', 'рдбреЛрдХреЗрджреБрдЦреА', 'рд╕рд┐рд░ рджрд░реНрдж', 'head'],
        stomach: ['рдкреЗрдЯ рджрд░реНрдж', 'stomach', 'рдкреЛрдЯ рджреБрдЦреА', 'pet', 'рдкреЗрдЯ'],
        appointment: ['рдбреЙрдХреНрдЯрд░', 'doctor', 'рд╡реИрджреНрдп', 'рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ', 'appointment', 'рднреЗрдЯ'],
        emergency: ['рдЖрдкрд╛рддрдХрд╛рд▓', 'emergency', 'рдЖрдкрддреНрдХрд╛рд▓реАрди', 'help', 'рдорджрдж', 'urgent']
    };
    
    return keywords[category]?.some(keyword => message.includes(keyword)) || false;
}

function handleSymptomFlow(symptom) {
    console.log(`Handling symptom flow: ${symptom}`);
    const symptomData = translations.chat.symptoms[symptom];
    if (symptomData) {
        const message = symptomData.question[currentLanguage];
        const options = symptomData.options[currentLanguage];
        addBotMessage(message, options);
        currentSymptomFlow = symptom;
    }
}

function handleOptionResponse(option) {
    if (currentSymptomFlow === 'fever') {
        handleFeverResponse(option);
    } else if (currentSymptomFlow === 'cough') {
        handleCoughResponse(option);
    } else {
        // Handle general options
        if (option.includes('рдХреЗрдВрджреНрд░ рджреЗрдЦреЗрдВ') || option.includes('View Centers') || option.includes('рдХреЗрдВрджреНрд░реЗ рдкрд╣рд╛')) {
            document.getElementById('facilities-modal').classList.remove('hidden');
        } else if (option.includes('ASHA') || option.includes('рдЖрд╢рд╛')) {
            handleASHAWorkerInfo();
        } else if (option.includes('рдФрд░ рдмрддрд╛рдПрдВ') || option.includes('tell more') || option.includes('рдЖрдгрдЦреА рд╕рд╛рдВрдЧрд╛')) {
            handleEducationAction();
        } else if (option.includes('рдзрдиреНрдпрд╡рд╛рдж') || option.includes('Thank you')) {
            handleThankYou();
        } else if (option === 'рдмреБрдЦрд╛рд░' || option === 'Fever' || option === 'рддрд╛рдк') {
            handleSymptomFlow('fever');
        } else if (option === 'рдЦрд╛рдВрд╕реА' || option === 'Cough' || option === 'рдЦреЛрдХрд▓рд╛') {
            handleSymptomFlow('cough');
        } else if (option.includes('рд╕рд┐рд░рджрд░реНрдж') || option.includes('Headache') || option.includes('рдбреЛрдХреЗрджреБрдЦреА')) {
            handleHeadacheFlow();
        } else if (option.includes('рдкреЗрдЯ рджрд░реНрдж') || option.includes('Stomach') || option.includes('рдкреЛрдЯ')) {
            handleStomachFlow();
        } else {
            handleGenericResponse();
        }
    }
    
    // Reset symptom flow after handling
    if (currentSymptomFlow && (option.includes('рдзрдиреНрдпрд╡рд╛рдж') || option.includes('Thank you') || option.includes('рдирд╣реАрдВ') || option.includes('No'))) {
        currentSymptomFlow = null;
    }
}

function handleFeverResponse(option) {
    console.log(`Handling fever response: ${option}`);
    let responseIndex = 0;
    
    if (option.includes('1') || (option.includes('day') && !option.includes('2-3')) || (option.includes('рджрд┐рди') && !option.includes('2-3')) || (option.includes('рджрд┐рд╡рд╕') && !option.includes('2-3'))) {
        responseIndex = 0;
    } else if (option.includes('2-3')) {
        responseIndex = 1;
    } else {
        responseIndex = 2;
    }
    
    const response = translations.chat.symptoms.fever.responses[currentLanguage][responseIndex];
    addBotMessage(response);
    
    // Offer to show facilities after advice
    setTimeout(() => {
        const facilityMsg = {
            hi: "рдирдЬрджреАрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░ рджреЗрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
            en: "Would you like to see nearby health centers?",
            mr: "рдЬрд╡рд│реАрд▓ рдЖрд░реЛрдЧреНрдп рдХреЗрдВрджреНрд░реЗ рдкрд╛рд╣реВ рдЗрдЪреНрдЫрд┐рддрд╛?"
        };
        const options = [
            {hi: 'рд╣рд╛рдБ, рджрд┐рдЦрд╛рдПрдВ', en: 'Yes, show me', mr: 'рд╣реЛрдп, рджрд╛рдЦрд╡рд╛'}[currentLanguage],
            {hi: 'рдирд╣реАрдВ, рдзрдиреНрдпрд╡рд╛рдж', en: 'No, thank you', mr: 'рдирд╛рд╣реА, рдзрдиреНрдпрд╡рд╛рдж'}[currentLanguage]
        ];
        addBotMessage(facilityMsg[currentLanguage], options);
    }, 2000);
}

function handleCoughResponse(option) {
    console.log(`Handling cough response: ${option}`);
    let responseIndex = 0;
    
    if (option.includes('рдмреБрдЦрд╛рд░') || option.includes('fever') || option.includes('рддрд╛рдкрд╣реА')) {
        responseIndex = 0;
    } else if (option.includes('рд╕рд╛рдВрд╕') || option.includes('breathing') || option.includes('рд╢реНрд╡рд╛рд╕')) {
        responseIndex = 1;
    } else {
        responseIndex = 2;
    }
    
    const response = translations.chat.symptoms.cough.responses[currentLanguage][responseIndex];
    addBotMessage(response);
}

function handleSymptomsAction() {
    const message = {
        hi: "рдЖрдкрдХреЛ рдХреМрди рд╕рд╛ рд▓рдХреНрд╖рдг рд╣реИ? рдмрддрд╛рдПрдВ:",
        en: "What symptoms do you have? Please tell me:",
        mr: "рддреБрдореНрд╣рд╛рд▓рд╛ рдХреЛрдгрддреА рд▓рдХреНрд╖рдгреЗ рдЖрд╣реЗрдд? рдХреГрдкрдпрд╛ рд╕рд╛рдВрдЧрд╛:"
    };
    const options = [
        {hi: 'рдмреБрдЦрд╛рд░', en: 'Fever', mr: 'рддрд╛рдк'}[currentLanguage],
        {hi: 'рдЦрд╛рдВрд╕реА', en: 'Cough', mr: 'рдЦреЛрдХрд▓рд╛'}[currentLanguage],
        {hi: 'рд╕рд┐рд░рджрд░реНрдж', en: 'Headache', mr: 'рдбреЛрдХреЗрджреБрдЦреА'}[currentLanguage],
        {hi: 'рдкреЗрдЯ рджрд░реНрдж', en: 'Stomach Pain', mr: 'рдкреЛрдЯрджреБрдЦреА'}[currentLanguage]
    ];
    addBotMessage(message[currentLanguage], options);
}

function handleAppointmentAction() {
    const message = {
        hi: "рдирдЬрджреАрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП 'рдХреЗрдВрджреНрд░ рджреЗрдЦреЗрдВ' рджрдмрд╛рдПрдВред",
        en: "Press 'View Centers' to see nearby health facilities.",
        mr: "'рдХреЗрдВрджреНрд░реЗ рдкрд╣рд╛' рджрд╛рдмреВрди рдЬрд╡рд│реАрд▓ рдЖрд░реЛрдЧреНрдп рд╕реБрд╡рд┐рдзрд╛ рдкрд╣рд╛."
    };
    const options = [
        {hi: 'рдХреЗрдВрджреНрд░ рджреЗрдЦреЗрдВ', en: 'View Centers', mr: 'рдХреЗрдВрджреНрд░реЗ рдкрд╣рд╛'}[currentLanguage],
        {hi: 'ASHA рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ', en: 'Talk to ASHA Worker', mr: 'ASHA рдХрд╛рд░реНрдпрдХрд░реНрддреНрдпрд╛рд╢реА рдмреЛрд▓рд╛'}[currentLanguage]
    ];
    addBotMessage(message[currentLanguage], options);
}

function handleEmergencyAction() {
    const message = {
        hi: "ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓ рдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ рддреБрд░рдВрдд 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ!",
        en: "ЁЯЪи In emergency, immediately call 108!",
        mr: "ЁЯЪи рдЖрдкрддреНрдХрд╛рд▓реАрди рдкрд░рд┐рд╕реНрдерд┐рддреАрдд рддрддреНрдХрд╛рд│ 108 рд╡рд░ рдХреЙрд▓ рдХрд░рд╛!"
    };
    addBotMessage(message[currentLanguage]);
    
    setTimeout(() => {
        document.getElementById('emergency-modal').classList.remove('hidden');
    }, 1000);
}

function handleEducationAction() {
    const tips = healthEducationContent[currentLanguage];
    const randomTip = tips[Math.floor(Math.random() * tips.length)];
    
    const message = `
        <div class="health-tip-card">
            <div class="health-tip-title">${randomTip.title}</div>
            <div class="health-tip-content">${randomTip.content}</div>
        </div>
    `;
    
    addBotMessage(message);
    
    setTimeout(() => {
        const moreMsg = {
            hi: "рдФрд░ рдХреЛрдИ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП?",
            en: "Do you need more health information?",
            mr: "рдЖрдгрдЦреА рдЖрд░реЛрдЧреНрдп рдорд╛рд╣рд┐рддреА рд╣рд╡реА рдЖрд╣реЗ рдХрд╛?"
        };
        const options = [
            {hi: 'рд╣рд╛рдБ, рдФрд░ рдмрддрд╛рдПрдВ', en: 'Yes, tell more', mr: 'рд╣реЛрдп, рдЖрдгрдЦреА рд╕рд╛рдВрдЧрд╛'}[currentLanguage],
            {hi: 'рдзрдиреНрдпрд╡рд╛рдж', en: 'Thank you', mr: 'рдзрдиреНрдпрд╡рд╛рдж'}[currentLanguage]
        ];
        addBotMessage(moreMsg[currentLanguage], options);
    }, 2000);
}

function handleASHAWorkerInfo() {
    const message = {
        hi: "рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реБрдиреАрддрд╛ рджреЗрд╡реА рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ:\nЁЯУЮ 9876543210\n\nтАв рдЯреАрдХрд╛рдХрд░рдг\nтАв рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдХреА рджреЗрдЦрднрд╛рд▓\nтАв рдмрдЪреНрдЪреЛрдВ рдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп\nтАв рдкрд░рд┐рд╡рд╛рд░ рдирд┐рдпреЛрдЬрди",
        en: "Contact ASHA Worker Sunita Devi:\nЁЯУЮ 9876543210\n\nтАв Vaccination\nтАв Pregnancy care\nтАв Child health\nтАв Family planning",
        mr: "рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реБрдиреАрддрд╛ рджреЗрд╡реА рдпрд╛рдВрдЪреНрдпрд╛рд╢реА рд╕рдВрдкрд░реНрдХ рд╕рд╛рдзрд╛:\nЁЯУЮ 9876543210\n\nтАв рд▓рд╕реАрдХрд░рдг\nтАв рдЧрд░реНрднрд╛рд╡рд╕реНрдереЗрдЪреА рдХрд╛рд│рдЬреА\nтАв рдореБрд▓рд╛рдВрдЪреЗ рдЖрд░реЛрдЧреНрдп\nтАв рдХреБрдЯреБрдВрдм рдирд┐рдпреЛрдЬрди"
    };
    addBotMessage(message[currentLanguage]);
}

function handleHeadacheFlow() {
    const message = {
        hi: "рд╕рд┐рд░рджрд░реНрдж рдХрд┐рддрдиреЗ рджрд┐рди рд╕реЗ рд╣реИ? рдЖрд░рд╛рдо рдХрд░рдиреЗ рд╕реЗ рдХрдо рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ?",
        en: "How many days have you had headache? Does it reduce with rest?",
        mr: "рдбреЛрдХреЗрджреБрдЦреА рдХрд┐рддреА рджрд┐рд╡рд╕рд╛рдВрдкрд╛рд╕реВрди рдЖрд╣реЗ? рдЖрд░рд╛рдо рдХреЗрд▓реНрдпрд╛рдиреЗ рдХрдореА рд╣реЛрддреЗ рдХрд╛?"
    };
    const options = [
        {hi: 'рдЖрдЬ рд╕реЗ', en: 'Since today', mr: 'рдЖрдЬрдкрд╛рд╕реВрди'}[currentLanguage],
        {hi: '2-3 рджрд┐рди', en: '2-3 days', mr: '2-3 рджрд┐рд╡рд╕'}[currentLanguage],
        {hi: 'рддреЗрдЬрд╝ рджрд░реНрдж', en: 'Severe pain', mr: 'рддреАрд╡реНрд░ рд╡реЗрджрдирд╛'}[currentLanguage]
    ];
    addBotMessage(message[currentLanguage], options);
}

function handleStomachFlow() {
    const message = {
        hi: "рдкреЗрдЯ рджрд░реНрдж рдХреИрд╕рд╛ рд╣реИ? рдЦрд╛рдирд╛ рдЦрд╛рдиреЗ рдХреЗ рдмрд╛рдж рдмрдврд╝рддрд╛ рд╣реИ?",
        en: "How is the stomach pain? Does it increase after eating?",
        mr: "рдкреЛрдЯрджреБрдЦреА рдХрд╢реА рдЖрд╣реЗ? рдЬреЗрд╡рдгрд╛рдирдВрддрд░ рд╡рд╛рдврддреЗ рдХрд╛?"
    };
    const options = [
        {hi: 'рд╣рд▓реНрдХрд╛ рджрд░реНрдж', en: 'Mild pain', mr: 'рд╣рд▓рдХрд╛ рджрд░реНрдж'}[currentLanguage],
        {hi: 'рддреЗрдЬрд╝ рджрд░реНрдж', en: 'Severe pain', mr: 'рддреАрд╡реНрд░ рджрд░реНрдж'}[currentLanguage],
        {hi: 'рдЦрд╛рдиреЗ рдХреЗ рдмрд╛рдж', en: 'After eating', mr: 'рдЬреЗрд╡рдгрд╛рдирдВрддрд░'}[currentLanguage]
    ];
    addBotMessage(message[currentLanguage], options);
}

function handleThankYou() {
    const message = {
        hi: "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдХреЛрдИ рдФрд░ рдорджрдж рдЪрд╛рд╣рд┐рдП рддреЛ рдкреВрдЫреЗрдВред рд╕реНрд╡рд╕реНрде рд░рд╣реЗрдВ! ЁЯЩП",
        en: "You're welcome! Ask if you need more help. Stay healthy! ЁЯЩП",
        mr: "рддреБрдордЪреЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ! рдЖрдгрдЦреА рдорджрдд рд╣рд╡реА рдЕрд╕рд▓реНрдпрд╛рд╕ рд╡рд┐рдЪрд╛рд░рд╛. рдирд┐рд░реЛрдЧреА рд░рд╛рд╣рд╛! ЁЯЩП"
    };
    addBotMessage(message[currentLanguage]);
}

function handleGenericResponse() {
    const responses = {
        hi: [
            "рдореИрдВ рд╕рдордЭ рдЧрдпрд╛ред рдХреНрдпрд╛ рдЖрдк рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ?",
            "рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдЪреБрдиреЗрдВред",
            "рдпрджрд┐ рдпрд╣ рдЧрдВрднреАрд░ рд╣реИ рддреЛ рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред"
        ],
        en: [
            "I understand. Can you tell me more about your symptoms?",
            "Please choose from the options below for more information.",
            "If this is serious, please see a doctor immediately."
        ],
        mr: [
            "рдорд▓рд╛ рд╕рдордЬрд▓реЗ. рддреБрдореНрд╣реА рддреБрдордЪреНрдпрд╛ рд▓рдХреНрд╖рдгрд╛рдВрдмрджреНрджрд▓ рдЕрдзрд┐рдХ рд╕рд╛рдВрдЧреВ рд╢рдХрддрд╛ рдХрд╛?",
            "рдЕрдзрд┐рдХ рдорд╛рд╣рд┐рддреАрд╕рд╛рдареА рдЦрд╛рд▓реАрд▓ рдкрд░реНрдпрд╛рдпрд╛рдВрдордзреВрди рдирд┐рд╡рдбрд╛.",
            "рд╣реЗ рдЧрдВрднреАрд░ рдЕрд╕рд▓реНрдпрд╛рд╕ рдХреГрдкрдпрд╛ рддрддреНрдХрд╛рд│ рдбреЙрдХреНрдЯрд░рд╛рдВрдирд╛ рднреЗрдЯрд╛."
        ]
    };
    
    const randomResponse = responses[currentLanguage][Math.floor(Math.random() * responses[currentLanguage].length)];
    addBotMessage(randomResponse);
}

function showTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    if (indicator) {
        indicator.classList.remove('hidden');
        scrollToBottom();
    }
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    if (indicator) {
        indicator.classList.add('hidden');
    }
}

function scrollToBottom() {
    const container = document.getElementById('messages-container');
    if (container) {
        container.scrollTop = container.scrollHeight;
    }
}

console.log('Rural Healthcare Assistant loaded successfully!');